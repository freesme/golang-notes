并发程序的优点
    客观表现问题模型
    充分利用CPU核心优势，提高程序执行效率
    充分利用CPU与其他硬件设备的异步性
主流的实现模型
    多进程
    多线程
    基于回调的非阻塞/异步IO
    协程
协程
    Go语言在语言级别支持轻量级线程，叫goroutine。Go语言的标准库提供的所有系统调用操作(当然也包括所有同步IO操作)，都会让出CPU给其他goroutine。
    这让事情变得非常简单，让轻量级线程的切换管理不依赖于系统的线程和进程，也不依赖于CPU的核心数量
 goroutine是Go语言中的轻量级线程的实现，由Go运行时(runtime)管理


    go Add(2,1)
    在一个函数调用前加上go关键字，这次调用就会在一个新的goroutine中并发执行。当被调用
    的函数返回时，这个goroutine也自动结束了。需要注意的是，如果这个函数有返回值，那么这个
    返回值会被丢弃。

 demo -最简单的协程使用方法 不完整，有缺陷
 demo2 -使用加锁的方式 共享变量，检测协程执行完成
 demo3 -使用通信共享内存 使用channel在两个或多个goroutine之间传递消息
 demo4 -channel语法 select 缓冲
 demo5 -超时机制