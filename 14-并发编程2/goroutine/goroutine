关键字go 是用户程序启用goroutine的唯一途径

一条go语句意味着一个函数或方法的并发执行

go 调用匿名函数

go func(){
    fmt.println("Go Goroutine!")
}()   不要忘记最后的圆括号，他们表示对函数的调用行为

线程实现模型
M   代表一个内核线程，或称工作线程
P   代表一个Go代码片段所必须的资源（上下文）
G   代表一个Go代码片段 前者是对后者的一种封装

main函数的goroutine称为主goroutine goroutine会由runtime.m0负责运行

主goroutine的工作：
    1.设定一个goroutine所能申请的栈空间的最大尺寸，32位系统中为 250MB  64位系统中1GB 如果有某个goroutine的栈空间尺寸大于这个限制
    那么运行时系统就会发起一个栈溢出的运行时异常  随机这个go程序的运行也会终止
    2.在设定好goroutine的最大栈尺寸之后，主goroutine会在当前的 M 的go上执行系统检测任务。 已知 系统检测任务的作用就是为了调度器查漏补缺，
    这也是让系统检测任务的执行先于main函数的原因之一
    3.此后主goroutine会进行一系列的初始化工作
        检查当前M是否是runtime.m0 如果不是，就说明之前的程序出现了某种问题。这时goroutine会立即抛出异常，Go程序启动失败
        创建特殊的defer语句，用于在主goroutine退出时做必要的善后处理
        启用专用于在后台清扫内存垃圾的goroutine 并设置GC可用标识
        执行main包中的init函数
    上述初始化工作成功完成，主goroutine就会执行main函数 在执行完成main函数之后 它还会检查goroutine是否引发了运行时异常，并进行必要的处理，
   最后主goroutine会结束自己以及当前进程的运行

在main函数执行期间，运行时系统会根据Go程序中的Go语句，复用或新建goroutine来封装go函数，这些goroutine都会放入响应的P的可运行G队列中，
然后等待调度器的调度，这样的等待时间通常会非常短暂，但是有时如此短暂的时间也不容忽视，就像前面的例子 中，它可能会使goroutine错过甚至永久
失去运行时机


