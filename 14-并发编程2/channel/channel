channel是Go语言所提倡的“以通信手段来共享内存”的最直接和最重要的体现，go语言使用一个通道类型值在不同的goroutine之间传递值

channel提供了一种同步机制，它既可以同步两个并发执行的函数，又可以让这两个函数通过传递特定类型的值来通信

基本概念
channel既指通道类型，一个泛化的通道类型的声明  chan T   别名类型  type IntChan chan int  通道类型 var intChan chan int
变量intChan 就可以用来传递int类型的元素了

单向通道  只发送  chan<- T  只接收  <-chan T

操作特性
    通道是在多个goroutine之间传递数据和同步的重要手段，对通道的操作本身也是同步的。同一时刻，仅有一个goroutine能向一个通道发送
    元素值，同时也仅有一个goroutine可以从它那里接收元素值。在通道中，各个元素值都是严格按照发送到此的先后顺序排列的，最早发送通
    道德元素值会最先被接收。通道相当于一个FIFO 先进先出的消息队列，此外通道中的元素都具有原子性，是不可被分割的通道中的每一个元素
    值都只可能被某一个goroutine接收，已被接收的元素值会立刻从通道中删除

初始化通道
    已知引用类型的值都需要使用内建函数make来初始化，通道类型也不例外
    make(chan int,10)   第二个参数指出该通道在同一时刻最多可以缓冲10个元素值
    make(chan int)  第二个值省略标识无法缓冲任何值，发给它的元素值会被立刻取走，否则发送方的goroutine会被暂停，知道有接收方接收这个元素

接收元素值
    <-
    //channel初始化
    strChan := make(chan int,3)

    //从通道中接收值
    elem := <-strChan
    elem,ok := <-strChan
    当前通道中没有任何元素值时，当前goroutine会被阻塞在此，如果进行接收操作之前或过程中该通道被关闭了，name该操作会立刻结束，即
    变量elem会被赋予该通道的元素类型为零值。  ok 在通道因为关闭而结束返回false否则为true

    从一个未被初始化的通道值接收数据会造成 当前gorourtine的永久阻塞

向通道发送值
    在对接收操作符 <- 两边的表达式求值会先于发送操作执行，在对这两个表达式的轻质完成之前，发送操作一定会被阻塞
    向通道发送一个值 "a"

        make(chan string,3)
        strChan <- "a"



